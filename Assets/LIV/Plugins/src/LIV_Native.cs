//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class LIV_Native {

#if NET5_0_OR_GREATER  
  [global::System.Runtime.CompilerServices.ModuleInitializer]
  internal static void Init()
  {
    System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(LIV_NativePINVOKE.SWIGGCHandleHelper).TypeHandle);
    System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(LIV_NativePINVOKE.SWIGPendingException).TypeHandle);
  }
#endif

  public static bool LIV_Load() {
    bool ret = LIV_NativePINVOKE.LIV_Load();
    return ret;
  }

  public static void LIV_Unload() {
    LIV_NativePINVOKE.LIV_Unload();
  }

  public static string LIV_GetError() {
    string ret = LIV_NativePINVOKE.LIV_GetError();
    return ret;
  }

  public static void LIV_DisplayErrorMessageBox() {
    LIV_NativePINVOKE.LIV_DisplayErrorMessageBox();
  }

  public static SWIGTYPE_p_uint64_t LIV_Tag(string str) {
    SWIGTYPE_p_uint64_t ret = new SWIGTYPE_p_uint64_t(LIV_NativePINVOKE.LIV_Tag(str), true);
    return ret;
  }

  public static string LIV_GetFeatureVersion() {
    string ret = LIV_NativePINVOKE.LIV_GetFeatureVersion();
    return ret;
  }

  public static string LIV_GetCSDKVersion() {
    string ret = LIV_NativePINVOKE.LIV_GetCSDKVersion();
    return ret;
  }

  public static void LIV_RequestCapture() {
    LIV_NativePINVOKE.LIV_RequestCapture();
  }

  public static bool LIV_IsActive() {
    bool ret = LIV_NativePINVOKE.LIV_IsActive();
    return ret;
  }

  public static bool LIV_D3D11_Init(SWIGTYPE_p_ID3D11Device device) {
    bool ret = LIV_NativePINVOKE.LIV_D3D11_Init(SWIGTYPE_p_ID3D11Device.getCPtr(device));
    return ret;
  }

  public static bool LIV_D3D11_ResourceInit(System.IntPtr resource) {
    bool ret = LIV_NativePINVOKE.LIV_D3D11_ResourceInit(resource);
    return ret;
  }

  public static LIV_InputFrame LIV_UpdateInputFrame(LIV_InputFrame inputRequest) {
    global::System.IntPtr cPtr = LIV_NativePINVOKE.LIV_UpdateInputFrame(LIV_InputFrame.getCPtr(inputRequest));
    LIV_InputFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new LIV_InputFrame(cPtr, false);
    return ret;
  }

  public static bool LIV_GetInputFrame(LIV_InputFrame output) {
    bool ret = LIV_NativePINVOKE.LIV_GetInputFrame(LIV_InputFrame.getCPtr(output));
    return ret;
  }

  public static void LIV_Start() {
    LIV_NativePINVOKE.LIV_Start();
  }

  public static void LIV_AddTexture(LIV_Texture desc) {
    LIV_NativePINVOKE.LIV_AddTexture(LIV_Texture.getCPtr(desc));
  }

  public static void LIV_Submit() {
    LIV_NativePINVOKE.LIV_Submit();
  }

  public static void LIV_ClearInputFrame(LIV_InputFrame input) {
    LIV_NativePINVOKE.LIV_ClearInputFrame(LIV_InputFrame.getCPtr(input));
  }

  public static bool LIV_GetResolution(LIV_Resolution output) {
    bool ret = LIV_NativePINVOKE.LIV_GetResolution(LIV_Resolution.getCPtr(output));
    return ret;
  }

  public static bool LIV_GetBridgeVersion(LIV_Version version) {
    bool ret = LIV_NativePINVOKE.LIV_GetBridgeVersion(LIV_Version.getCPtr(version));
    return ret;
  }

  public static void LIV_SubmitApplicationInformation(LIV_ApplicationInformation information) {
    LIV_NativePINVOKE.LIV_SubmitApplicationInformation(LIV_ApplicationInformation.getCPtr(information));
  }

  public static LIV_Vector3 LIV_Vector3_GL(LIV_Vector3 input) {
    LIV_Vector3 ret = new LIV_Vector3(LIV_NativePINVOKE.LIV_Vector3_GL(LIV_Vector3.getCPtr(input)), true);
    if (LIV_NativePINVOKE.SWIGPendingException.Pending) throw LIV_NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static LIV_Quaternion LIV_Quaternion_GL(LIV_Quaternion input) {
    LIV_Quaternion ret = new LIV_Quaternion(LIV_NativePINVOKE.LIV_Quaternion_GL(LIV_Quaternion.getCPtr(input)), true);
    if (LIV_NativePINVOKE.SWIGPendingException.Pending) throw LIV_NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static LIV_Matrix4x4 LIV_Matrix4x4_GL(LIV_Matrix4x4 input) {
    LIV_Matrix4x4 ret = new LIV_Matrix4x4(LIV_NativePINVOKE.LIV_Matrix4x4_GL(LIV_Matrix4x4.getCPtr(input)), true);
    return ret;
  }

  public static bool LIV_GL_Init() {
    bool ret = LIV_NativePINVOKE.LIV_GL_Init();
    return ret;
  }

  public static void LIV_GL_Quit() {
    LIV_NativePINVOKE.LIV_GL_Quit();
  }

  public static void LIV_GL_ForceFBO() {
    LIV_NativePINVOKE.LIV_GL_ForceFBO();
  }

  public static bool LIV_GL_AutoConvertTo8Bit() {
    bool ret = LIV_NativePINVOKE.LIV_GL_AutoConvertTo8Bit();
    return ret;
  }

  public static bool LIV_Pathfinder_Clear(string path) {
    bool ret = LIV_NativePINVOKE.LIV_Pathfinder_Clear(path);
    return ret;
  }

  public static bool LIV_Pathfinder_Set(string path, System.IntPtr data, int len, LIV_Pathfinder_Type type) {
    bool ret = LIV_NativePINVOKE.LIV_Pathfinder_Set(path, data, len, (int)type);
    return ret;
  }

  public static bool LIV_Pathfinder_Get(string path, System.IntPtr data, int len, LIV_Pathfinder_Type type) {
    bool ret = LIV_NativePINVOKE.LIV_Pathfinder_Get(path, data, len, (int)type);
    return ret;
  }

  public static bool LIV_Pathfinder_GetObject(long handle, string path, System.IntPtr data, int len, LIV_Pathfinder_Type type) {
    bool ret = LIV_NativePINVOKE.LIV_Pathfinder_GetObject(handle, path, data, len, (int)type);
    return ret;
  }

  public static bool LIV_Pathfinder_SetObject(long handle, string path, System.IntPtr data, int len, LIV_Pathfinder_Type type) {
    bool ret = LIV_NativePINVOKE.LIV_Pathfinder_SetObject(handle, path, data, len, (int)type);
    return ret;
  }

  public static bool LIV_Pathfinder_SetSmallObject(long handle, string path, long value, LIV_Pathfinder_Type type) {
    bool ret = LIV_NativePINVOKE.LIV_Pathfinder_SetSmallObject(handle, path, value, (int)type);
    return ret;
  }

  public static long LIV_Pathfinder_GetSmallObject(long handle, string path, LIV_Pathfinder_Type type) {
    long ret = LIV_NativePINVOKE.LIV_Pathfinder_GetSmallObject(handle, path, (int)type);
    return ret;
  }

  public static readonly int LIV_COMPOSITOR_FEATURES_NONE = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_NONE_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_DISABLED = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_DISABLED_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_ACTIVE = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_ACTIVE_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_INITIALIZING = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_INITIALIZING_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_RESERVED1 = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_RESERVED1_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_DISABLE_TELEMETRY = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_DISABLE_TELEMETRY_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_SYNC_LIMIT = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_SYNC_LIMIT_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_ENABLE_VIEWFINDER = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_ENABLE_VIEWFINDER_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_DISABLE_VIVR = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_DISABLE_VIVR_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_DISABLE_BLOOM_EFFECTS = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_DISABLE_BLOOM_EFFECTS_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_DISABLE_BACKGROUND = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_DISABLE_BACKGROUND_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_DISABLE_FOREGROUND = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_DISABLE_FOREGROUND_get();
  public static readonly int LIV_COMPOSITOR_FEATURE_FREEZE_COMPOSITION = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURE_FREEZE_COMPOSITION_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_LEGACY_SOURCE = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_LEGACY_SOURCE_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_CAMERA_SOURCE = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_CAMERA_SOURCE_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_VIVR_SOURCE = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_VIVR_SOURCE_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_GAME_SOURCE = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_GAME_SOURCE_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_ENABLE_TESTCODE = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_ENABLE_TESTCODE_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_TEST_CLIPPLANE = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_TEST_CLIPPLANE_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_TEST_ORBITCAMERA = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_TEST_ORBITCAMERA_get();
  public static readonly int LIV_COMPOSITOR_FEATURES_TEST_WOBBLE = LIV_NativePINVOKE.LIV_COMPOSITOR_FEATURES_TEST_WOBBLE_get();
  public static readonly int LIV_FEATURES_UNDEFINED = LIV_NativePINVOKE.LIV_FEATURES_UNDEFINED_get();
  public static readonly int LIV_FEATURES_BACKGROUND_RENDER = LIV_NativePINVOKE.LIV_FEATURES_BACKGROUND_RENDER_get();
  public static readonly int LIV_FEATURES_FOREGROUND_RENDER = LIV_NativePINVOKE.LIV_FEATURES_FOREGROUND_RENDER_get();
  public static readonly int LIV_FEATURES_BOTH_RENDER = LIV_NativePINVOKE.LIV_FEATURES_BOTH_RENDER_get();
  public static readonly int LIV_FEATURES_COMPLEX_CLIP_PLANE = LIV_NativePINVOKE.LIV_FEATURES_COMPLEX_CLIP_PLANE_get();
  public static readonly int LIV_FEATURES_BACKGROUND_DEPTH_RENDER = LIV_NativePINVOKE.LIV_FEATURES_BACKGROUND_DEPTH_RENDER_get();
  public static readonly int LIV_FEATURES_OVERRIDE_POST_PROCESSING = LIV_NativePINVOKE.LIV_FEATURES_OVERRIDE_POST_PROCESSING_get();
  public static readonly int LIV_FEATURES_FIX_FOREGROUND_ALPHA = LIV_NativePINVOKE.LIV_FEATURES_FIX_FOREGROUND_ALPHA_get();
  public static readonly int LIV_FEATURES_GROUND_CLIP_PLANE = LIV_NativePINVOKE.LIV_FEATURES_GROUND_CLIP_PLANE_get();
  public static readonly int LIV_FEATURES_UPDATE_POSE = LIV_NativePINVOKE.LIV_FEATURES_UPDATE_POSE_get();
  public static readonly int LIV_FEATURES_UPDATE_CLIPPLANE = LIV_NativePINVOKE.LIV_FEATURES_UPDATE_CLIPPLANE_get();
  public static readonly int LIV_FEATURES_UPDATE_STAGE = LIV_NativePINVOKE.LIV_FEATURES_UPDATE_STAGE_get();
  public static readonly int LIV_FEATURES_UPDATE_RESOLUTION = LIV_NativePINVOKE.LIV_FEATURES_UPDATE_RESOLUTION_get();
  public static readonly int LIV_FEATURES_UPDATE_ALL = LIV_NativePINVOKE.LIV_FEATURES_UPDATE_ALL_get();
  public static readonly int LIV_FEATURES_POSE_UPDATED = LIV_NativePINVOKE.LIV_FEATURES_POSE_UPDATED_get();
  public static readonly int LIV_FEATURES_CLIPPLANE_UPDATED = LIV_NativePINVOKE.LIV_FEATURES_CLIPPLANE_UPDATED_get();
  public static readonly int LIV_FEATURES_STAGE_UPDATED = LIV_NativePINVOKE.LIV_FEATURES_STAGE_UPDATED_get();
  public static readonly int LIV_FEATURES_RESOLUTION_UPDATED = LIV_NativePINVOKE.LIV_FEATURES_RESOLUTION_UPDATED_get();
  public static readonly int LIV_FEATURES_DEBUG_CLIP_PLANE = LIV_NativePINVOKE.LIV_FEATURES_DEBUG_CLIP_PLANE_get();
}
