//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class LIV_InputFrame : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LIV_InputFrame(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LIV_InputFrame obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LIV_InputFrame() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LIV_NativePINVOKE.delete_LIV_InputFrame(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public LIV_Pose pose {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_pose_set(swigCPtr, LIV_Pose.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LIV_NativePINVOKE.LIV_InputFrame_pose_get(swigCPtr);
      LIV_Pose ret = (cPtr == global::System.IntPtr.Zero) ? null : new LIV_Pose(cPtr, false);
      return ret;
    } 
  }

  public LIV_ClipPlane clipPlane {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_clipPlane_set(swigCPtr, LIV_ClipPlane.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LIV_NativePINVOKE.LIV_InputFrame_clipPlane_get(swigCPtr);
      LIV_ClipPlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new LIV_ClipPlane(cPtr, false);
      return ret;
    } 
  }

  public LIV_Transform StageTransform {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_StageTransform_set(swigCPtr, LIV_Transform.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LIV_NativePINVOKE.LIV_InputFrame_StageTransform_get(swigCPtr);
      LIV_Transform ret = (cPtr == global::System.IntPtr.Zero) ? null : new LIV_Transform(cPtr, false);
      return ret;
    } 
  }

  public ulong features {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_features_set(swigCPtr, value);
    } 
    get {
      ulong ret = LIV_NativePINVOKE.LIV_InputFrame_features_get(swigCPtr);
      return ret;
    } 
  }

  public LIV_ClipPlane GroundPlane {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_GroundPlane_set(swigCPtr, LIV_ClipPlane.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LIV_NativePINVOKE.LIV_InputFrame_GroundPlane_get(swigCPtr);
      LIV_ClipPlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new LIV_ClipPlane(cPtr, false);
      return ret;
    } 
  }

  public ulong frameid {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_frameid_set(swigCPtr, value);
    } 
    get {
      ulong ret = LIV_NativePINVOKE.LIV_InputFrame_frameid_get(swigCPtr);
      return ret;
    } 
  }

  public ulong refrenceframe {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_refrenceframe_set(swigCPtr, value);
    } 
    get {
      ulong ret = LIV_NativePINVOKE.LIV_InputFrame_refrenceframe_get(swigCPtr);
      return ret;
    } 
  }

  public ulong priority {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_priority_set(swigCPtr, value);
    } 
    get {
      ulong ret = LIV_NativePINVOKE.LIV_InputFrame_priority_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte pose_priority {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_pose_priority_set(swigCPtr, value);
    } 
    get {
      sbyte ret = LIV_NativePINVOKE.LIV_InputFrame_pose_priority_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte clipplane_priority {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_clipplane_priority_set(swigCPtr, value);
    } 
    get {
      sbyte ret = LIV_NativePINVOKE.LIV_InputFrame_clipplane_priority_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte stage_priority {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_stage_priority_set(swigCPtr, value);
    } 
    get {
      sbyte ret = LIV_NativePINVOKE.LIV_InputFrame_stage_priority_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte resolution_priority {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_resolution_priority_set(swigCPtr, value);
    } 
    get {
      sbyte ret = LIV_NativePINVOKE.LIV_InputFrame_resolution_priority_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte feature_priority {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_feature_priority_set(swigCPtr, value);
    } 
    get {
      sbyte ret = LIV_NativePINVOKE.LIV_InputFrame_feature_priority_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte NearFarAdjustment_priority {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_NearFarAdjustment_priority_set(swigCPtr, value);
    } 
    get {
      sbyte ret = LIV_NativePINVOKE.LIV_InputFrame_NearFarAdjustment_priority_get(swigCPtr);
      return ret;
    } 
  }

  public sbyte groundplane_priority {
    set {
      LIV_NativePINVOKE.LIV_InputFrame_groundplane_priority_set(swigCPtr, value);
    } 
    get {
      sbyte ret = LIV_NativePINVOKE.LIV_InputFrame_groundplane_priority_get(swigCPtr);
      return ret;
    } 
  }

  public LIV_InputFrame() : this(LIV_NativePINVOKE.new_LIV_InputFrame(), true) {
  }

}
