//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class LIV_TrackedSpace : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LIV_TrackedSpace(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LIV_TrackedSpace obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~LIV_TrackedSpace() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LIV_NativePINVOKE.delete_LIV_TrackedSpace(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public LIV_Vector3 trackedSpaceStagePosition {
    set {
      LIV_NativePINVOKE.LIV_TrackedSpace_trackedSpaceStagePosition_set(swigCPtr, LIV_Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LIV_NativePINVOKE.LIV_TrackedSpace_trackedSpaceStagePosition_get(swigCPtr);
      LIV_Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new LIV_Vector3(cPtr, false);
      return ret;
    } 
  }

  public LIV_Quaternion trackedSpaceStageRotation {
    set {
      LIV_NativePINVOKE.LIV_TrackedSpace_trackedSpaceStageRotation_set(swigCPtr, LIV_Quaternion.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LIV_NativePINVOKE.LIV_TrackedSpace_trackedSpaceStageRotation_get(swigCPtr);
      LIV_Quaternion ret = (cPtr == global::System.IntPtr.Zero) ? null : new LIV_Quaternion(cPtr, false);
      return ret;
    } 
  }

  public LIV_Vector3 trackedSpaceLocalScale {
    set {
      LIV_NativePINVOKE.LIV_TrackedSpace_trackedSpaceLocalScale_set(swigCPtr, LIV_Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LIV_NativePINVOKE.LIV_TrackedSpace_trackedSpaceLocalScale_get(swigCPtr);
      LIV_Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new LIV_Vector3(cPtr, false);
      return ret;
    } 
  }

  public LIV_Matrix4x4 trackedSpaceLocalToStageMatrix {
    set {
      LIV_NativePINVOKE.LIV_TrackedSpace_trackedSpaceLocalToStageMatrix_set(swigCPtr, LIV_Matrix4x4.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LIV_NativePINVOKE.LIV_TrackedSpace_trackedSpaceLocalToStageMatrix_get(swigCPtr);
      LIV_Matrix4x4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new LIV_Matrix4x4(cPtr, false);
      return ret;
    } 
  }

  public LIV_Matrix4x4 trackedSpaceStageToLocalMatrix {
    set {
      LIV_NativePINVOKE.LIV_TrackedSpace_trackedSpaceStageToLocalMatrix_set(swigCPtr, LIV_Matrix4x4.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LIV_NativePINVOKE.LIV_TrackedSpace_trackedSpaceStageToLocalMatrix_get(swigCPtr);
      LIV_Matrix4x4 ret = (cPtr == global::System.IntPtr.Zero) ? null : new LIV_Matrix4x4(cPtr, false);
      return ret;
    } 
  }

  public LIV_TrackedSpace() : this(LIV_NativePINVOKE.new_LIV_TrackedSpace(), true) {
  }

}
